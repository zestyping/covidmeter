#!/usr/bin/env python3

from collections import namedtuple
import json, os, requests, shutil, sys, tempfile, time

if len(sys.argv) < 2:
    raise SystemExit(f'Usage: {sys.argv[0]} <covidactnow.org API key>')

BASE_URL = 'https://raw.githubusercontent.com/microcovid/microcovid/main'
DEST_DIR = os.getcwd() + '/web'
TEMP_DIR = tempfile.mkdtemp()
CACHE_FILE = '.prevalence_data.json'
os.makedirs(DEST_DIR, exist_ok=True)
os.environ['CAN_API_KEY'] = sys.argv[1]

def download_file(path):
    print(f'Fetching {path}...')
    dir = os.path.dirname(path)
    if dir:
        os.makedirs(dir, exist_ok=True)
    with open(path, 'w', encoding='utf8') as f:
        f.write(requests.get(f'{BASE_URL}/{path}').text)

def run_update_prevalence():
    download_file('update_prevalence.py')
    download_file('us_state_abbrev.py')
    download_file('public/tracker/vaccine_table.csv')
    download_file('src/data/locations.ts')
    with open('src/data/location.ts', 'w') as f:
        f.write('// update_prevalence locations start\n')
        f.write('// update_prevalence locations end\n')
        f.write('// update_prevalence date\n')
    sys.path.insert(0, '.')

    import update_prevalence

    def patched_json(self):
        result = update_prevalence.pydantic.BaseModel.json(self)
        prevalence = json.loads(result)
        for key in prevalence:
            prevalence[key]['estimatedPrevalence'] = float(
              self.__root__[key].as_csv_data()['Estimated prevalence']
            )
        if prevalence:
            with open(f'{DEST_DIR}/prevalence.js', 'w') as f:
                f.write('const prevalence = ')
                json.dump(prevalence, f, indent=2)
                f.write(';\n')
            print(f'Wrote {DEST_DIR}/prevalence.js.')
        else:
            print(f'Empty data set!')
        return result

    parse_json = update_prevalence.parse_json

    def patched_parse_json(cache, model, url):
        if model.__name__.startswith('Canada'):  # skip Canada
            return namedtuple(model.__name__, ['hr', 'prov'])([], [])
        return parse_json(cache, model, url)

    update_prevalence.sleep = lambda seconds: time.sleep(seconds * 3)
    update_prevalence.AppLocations.json = patched_json
    update_prevalence.parse_json = patched_parse_json
    update_prevalence.main()

    with open('public/prevalence_data/date.csv') as f:
        f.readline();
        effective_date = f.readline().strip();
    with open(f'{DEST_DIR}/prevalence.js', 'a') as f:
        f.write('const effective_date = "' + effective_date + '";\n');

try:
    os.chdir(TEMP_DIR)
    if os.path.exists(f'{DEST_DIR}/{CACHE_FILE}'):
        shutil.copy(f'{DEST_DIR}/{CACHE_FILE}', '.')
    run_update_prevalence()
finally:
    if os.path.exists(CACHE_FILE):
        shutil.copy(CACHE_FILE, DEST_DIR)
    os.chdir(DEST_DIR)
    shutil.rmtree(TEMP_DIR)
